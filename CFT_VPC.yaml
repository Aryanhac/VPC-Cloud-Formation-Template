---
AWSTemplateFormatVersion: "2010-09-09"

Description: This CFT template create VPC with 2 public subnet and 4 private subnet

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "VPC Network Range"
        Parameters: 
          - VPCIPRANGE
      - 
        Label: 
          default: "Public Subnet"
        Parameters: 
          - VPCIPRANGEPUBLICSUBNET1
          - VPCIPRANGEPUBLICSUBNET2
      - 
        Label: 
          default: "Private Subnet"
        Parameters: 
          - VPCIPRANGEPRIVATESUBNET1
          - VPCIPRANGEPRIVATESUBNET2
          - VPCIPRANGEPRIVATESUBNET3
          - VPCIPRANGEPRIVATESUBNET4
      - 
        Label: 
          default: "SSH LOCATION"
        Parameters: 
          - SSHLOCATION


Parameters:
  VPCIPRANGE:
    Default: 10.0.0.0/16
    Description: This is the IP range for the VPC
    Type: String

  VPCIPRANGEPUBLICSUBNET1:
    Default: 10.0.0.0/24
    Description: This is the IP range in the VPC for public subnet 1
    Type: String

  VPCIPRANGEPUBLICSUBNET2:
    Default: 10.0.1.0/24
    Description: This is the IP range in the VPC for public subnet 1
    Type: String

  VPCIPRANGEPRIVATESUBNET1:
    Default: 10.0.2.0/24
    Description: This is the IP range in the VPC for private subnet 1
    Type: String

  VPCIPRANGEPRIVATESUBNET2:
    Default: 10.0.3.0/24
    Description: This is the IP range in the VPC for private subnet 2
    Type: String

  VPCIPRANGEPRIVATESUBNET3:
    Default: 10.0.4.0/24
    Description: This is the IP range in the VPC for private subnet 3
    Type: String

  VPCIPRANGEPRIVATESUBNET4:
    Default: 10.0.5.0/24
    Description: This is the IP range in the VPC for private subnet 4
    Type: String

  SSHLOCATION:
    AllowedPattern: ((\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2}))
    ConstraintDescription: must be valid IP CIDR range of the form x.x.x.x/x
    Description: It is the range of SSH Location ip address
    Default: 0.0.0.0/0
    MaxLength: 18
    MinLength: 9
    Type: String

Resources:
# Creating VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCIPRANGE
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: name 
          Value: firstvpc

# Creating Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags: 
        - Key: name
          Value: firstInternetGateway

# Attaching Internet Gateway to vpc
  AttachedInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

# Create Public Subnet 1 
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref VPCIPRANGEPUBLICSUBNET1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: name 
          Value: publicsubnet1
      VpcId: !Ref VPC

# Create Public Subnet 2
  PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
        AvailabilityZone: !Select [1, !GetAZs '']
        CidrBlock: !Ref VPCIPRANGEPUBLICSUBNET2
        MapPublicIpOnLaunch: true
        Tags:
          - Key: name 
            Value: publicsubnet2
        VpcId: !Ref VPC

# Creating Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
        - Key: name
          Value: public Route Table
      VpcId: !Ref VPC

# Adding Route to Public Route Table  
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

# Route Table association with Public Subnet 1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

# Route Table association with Public Subnet 2   
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

# Create Private Subnet1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref VPCIPRANGEPRIVATESUBNET1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: name
          Value: PrivateSubnet1
      VpcId: !Ref VPC

# Create Private Subnet2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref VPCIPRANGEPRIVATESUBNET2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: name
          Value: PrivateSubnet2
      VpcId: !Ref VPC

# Create Private Subnet3
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref VPCIPRANGEPRIVATESUBNET3
      MapPublicIpOnLaunch: false
      Tags:
        - Key: name
          Value: PrivateSubnet3
      VpcId: !Ref VPC

# Create Private Subnet4
  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref VPCIPRANGEPRIVATESUBNET4
      MapPublicIpOnLaunch: false
      Tags:
        - Key: name
          Value: PrivateSubnet4
      VpcId: !Ref VPC

# Creating Security Group for Load Balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable Http/Https access on port 80/443
      SecurityGroupIngress: 
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
      Tags: 
        - Key: name
          Value: LoadBalancerSecurityGroup
      VpcId: !Ref VPC
  
# Create Security Group for the SSHSecurityGroup
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable SSH
      SecurityGroupIngress: 
        - IpProtocol: tcp
          CidrIp: !Ref SSHLOCATION
          FromPort: 22
          ToPort: 22
      Tags: 
        - Key: name
          Value: SSHSecurityGroup
      VpcId: !Ref VPC

# Create Security Group for the WebServerSecurityGroup  
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Enable http/https request on port 80/443
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SSHSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags: 
        - Key: name
          Value: WEBSERVERSecurityGroup
      VpcId: !Ref VPC

# Create Security Group for the DataBase
  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: database access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      Tags:
        - Key: name
          Value: Database Security Group
      VpcId: !Ref VPC

Outputs:
  VPC:
    Description: The ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC
  
  PublicSubnet1:
    Description: The ID of the Public Subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1
  
  PublicSubnet2:
    Description: The ID of the Public Subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2
  
  PrivateSubnet1:
    Description: The ID of the Private Subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Description: The ID of the Private Subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2

  PrivateSubnet3:
    Description: The ID of the Private Subnet 3
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet3

  PrivateSubnet4:
    Description: The ID of the Private Subnet 4
    Value: !Ref PrivateSubnet4
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet4

  LoadBalancerSecurityGroup:
    Description: The ID of the Load Balancer Security Group
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerSecurityGroup
  
  SSHSecurityGroup:
    Description: The ID of the SSH Security Group
    Value: !Ref SSHSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-SSHSecurityGroup

  WebServerSecurityGroup:
    Description: The ID of the Web Server Security Group
    Value: !Ref WebServerSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-WebServerSecurityGroup

  DatabaseSecurityGroup:
    Description: The ID of the Database Security Group
    Value: !Ref DatabaseSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSecurityGroup
